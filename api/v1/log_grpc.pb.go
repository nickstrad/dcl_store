// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package log_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClient interface {
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	AppendStream(ctx context.Context, opts ...grpc.CallOption) (Log_AppendStreamClient, error)
	ReadStream(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Log_ReadStreamClient, error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/log.v1.Log/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/log.v1.Log/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) AppendStream(ctx context.Context, opts ...grpc.CallOption) (Log_AppendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Log_serviceDesc.Streams[0], "/log.v1.Log/AppendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logAppendStreamClient{stream}
	return x, nil
}

type Log_AppendStreamClient interface {
	Send(*AppendRequest) error
	Recv() (*AppendResponse, error)
	grpc.ClientStream
}

type logAppendStreamClient struct {
	grpc.ClientStream
}

func (x *logAppendStreamClient) Send(m *AppendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logAppendStreamClient) Recv() (*AppendResponse, error) {
	m := new(AppendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logClient) ReadStream(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Log_ReadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Log_serviceDesc.Streams[1], "/log.v1.Log/ReadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logReadStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Log_ReadStreamClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type logReadStreamClient struct {
	grpc.ClientStream
}

func (x *logReadStreamClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility
type LogServer interface {
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	AppendStream(Log_AppendStreamServer) error
	ReadStream(*ReadRequest, Log_ReadStreamServer) error
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (UnimplementedLogServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedLogServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedLogServer) AppendStream(Log_AppendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendStream not implemented")
}
func (UnimplementedLogServer) ReadStream(*ReadRequest, Log_ReadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadStream not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.v1.Log/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.v1.Log/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_AppendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServer).AppendStream(&logAppendStreamServer{stream})
}

type Log_AppendStreamServer interface {
	Send(*AppendResponse) error
	Recv() (*AppendRequest, error)
	grpc.ServerStream
}

type logAppendStreamServer struct {
	grpc.ServerStream
}

func (x *logAppendStreamServer) Send(m *AppendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logAppendStreamServer) Recv() (*AppendRequest, error) {
	m := new(AppendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Log_ReadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServer).ReadStream(m, &logReadStreamServer{stream})
}

type Log_ReadStreamServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type logReadStreamServer struct {
	grpc.ServerStream
}

func (x *logReadStreamServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "log.v1.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _Log_Append_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Log_Read_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppendStream",
			Handler:       _Log_AppendStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadStream",
			Handler:       _Log_ReadStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/log.proto",
}
